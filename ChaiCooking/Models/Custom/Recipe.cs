// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var recipe = Recipe.FromJson(jsonString);
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var recipe = Recipe.FromJson(jsonString);
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using ChaiCooking.Models.Custom.Feed;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ChaiCooking.Models.Custom
{

    public partial class Recipe : INotifyPropertyChanged, IEquatable<Recipe>
    {
        public event PropertyChangedEventHandler PropertyChanged;

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("whisk_recipe_id")]
        public string WhiskRecipeId { get; set; }

        //[JsonProperty("name")]
        //public string Name { get; set; }

        [JsonProperty("name")]
        public string name;
        public string Name
        {
            set
            {
                if (name != value)
                {
                    name = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Name"));
                }
            }
            get
            {
                return name;
            }

        }



        [JsonProperty("ingredients")]
        public Ingredient[] Ingredients { get; set; }

        [JsonProperty("instructions")]
        public Instructions Instructions { get; set; }

        [JsonProperty("images")]
        public Image[] Images { get; set; }

        [JsonProperty("source")]
        public Source Source { get; set; }

        [JsonProperty("servings")]
        public long Servings { get; set; }

        [JsonProperty("nutrition")]
        public Nutrition Nutrition { get; set; }

        [JsonProperty("labels")]
        public Labels Labels { get; set; }

        [JsonProperty("constraints")]
        public Constraints Constraints { get; set; }

        [JsonProperty("language")]
        public string Language { get; set; }

        [JsonProperty("chai")]
        public Chai chai { get; set; }

        [JsonProperty("durations")]
        public Durations Durations { get; set; }

        public bool Equals(Recipe other)
        {
            //Check whether the compared object is null.
            if (Object.ReferenceEquals(other, null)) return false;

            //Check whether the compared object references the same data.
            if (Object.ReferenceEquals(this, other)) return true;

            //Check whether the products' properties are equal.
            return Id.Equals(other.Id) && Name.Equals(other.Name);
        }

        public override int GetHashCode()
        {

            //Get hash code for the Name field if it is not null.
            int hashRecipeName = Name == null ? 0 : Name.GetHashCode();

            //Get hash code for the Code field.
            int hashRecipeId = Id.GetHashCode();

            //Calculate the hash code for the product.
            return hashRecipeName ^ hashRecipeId;
        }
    }

    public partial class Constraints
    {
        [JsonProperty("violates")]
        public Violates Violates { get; set; }
    }

    public partial class Violates
    {
        [JsonProperty("diets")]
        public string[] Diets { get; set; }

        [JsonProperty("avoidances")]
        public string[] Avoidances { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("responsive")]
        public Responsive Responsive { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class Responsive
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("selection")]
        public Selection Selection { get; set; }
    }

    public partial class Ingredient
    {
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("id")]
        public int ID { get; set; }

        [JsonProperty("recipe_id")]
        public int RecipeId { get; set; }

        [JsonProperty("amount")]
        public string Amount { get; set; }

        [JsonProperty("base_ingredient")]
        public BaseIngredient BaseIngredient { get; set; }

        [JsonProperty("recipe_component")]
        public string RecipeComponent { get; set; }

        [JsonProperty("unit")]
        public IngredientUnit Unit { get; set; }
    }

    public partial class BaseIngredient
    {
        [JsonProperty("id")]
        int ID { get; set; }

        [JsonProperty("name")]
        string Name { get; set; }
    }

    public partial class IngredientUnit
    {
        [JsonProperty("id")]
        public int ID { get; set; }

        [JsonProperty("abbreviation")]
        public string Abbreviation { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Instructions
    {
        [JsonProperty("steps")]
        public Ingredient[] Steps { get; set; }
    }

    public partial class Labels
    {
        [JsonProperty("technique")]
        public Technique[] Technique { get; set; }

        [JsonProperty("meal_type")]
        public MealType[] MealType { get; set; }


    }

    public partial class Technique
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("display_name")]
        public string DisplayName { get; set; }
    }

    public partial class MealType
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("display_name")]
        public string DisplayName { get; set; }
    }

    public partial class Nutrition
    {
        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("total")]
        public Total[] Total { get; set; }

        [JsonProperty("labels")]
        public Technique[] Labels { get; set; }

        [JsonProperty("health_score")]
        public HealthScore HealthScore { get; set; }

        [JsonProperty("glycemic_index")]
        public Glycemic GlycemicIndex { get; set; }

        [JsonProperty("glycemic_load")]
        public Glycemic GlycemicLoad { get; set; }
    }

    public partial class Glycemic
    {
        [JsonProperty("value")]
        public double Value { get; set; }
    }

    public partial class HealthScore
    {
        [JsonProperty("value")]
        public double Value { get; set; }

        [JsonProperty("nutrients_influence")]
        public NutrientsInfluence[] NutrientsInfluence { get; set; }
    }

    public partial class NutrientsInfluence
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("influence")]
        public double Influence { get; set; }

        [JsonProperty("comment")]
        public string Comment { get; set; }
    }

    public partial class Total
    {
        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("value")]
        public double Value { get; set; }

        [JsonProperty("unit")]
        public Unit Unit { get; set; }
    }

    public partial class Source
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("display_name")]
        public string DisplayName { get; set; }

        [JsonProperty("source_recipe_url")]
        public Uri SourceRecipeUrl { get; set; }

        [JsonProperty("image")]
        public Image SourceImage { get; set; }

        [JsonProperty("license")]
        public string License { get; set; }
    }

    public partial class Durations
    {
        [JsonProperty("cook_time")]
        public long? CookTime { get; set; }

        [JsonProperty("prep_time")]
        public long? PrepTime { get; set; }

        [JsonProperty("total_time")]
        public long? TotalTime { get; set; }
    }

    public partial class Selection
    {
        [JsonProperty("x")]
        public long x { get; set; }
        [JsonProperty("y")]
        public long y { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }
    }

    public enum Unit { NutritionUnitG, NutritionUnitKcal, NutritionUnitMg, NutritionUnitMkg };

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                UnitConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class UnitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Unit) || t == typeof(Unit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "NUTRITION_UNIT_G":
                    return Unit.NutritionUnitG;
                case "NUTRITION_UNIT_KCAL":
                    return Unit.NutritionUnitKcal;
                case "NUTRITION_UNIT_MG":
                    return Unit.NutritionUnitMg;
                case "NUTRITION_UNIT_MKG":
                    return Unit.NutritionUnitMkg;
            }
            throw new Exception("Cannot unmarshal type Unit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Unit)untypedValue;
            switch (value)
            {
                case Unit.NutritionUnitG:
                    serializer.Serialize(writer, "NUTRITION_UNIT_G");
                    return;
                case Unit.NutritionUnitKcal:
                    serializer.Serialize(writer, "NUTRITION_UNIT_KCAL");
                    return;
                case Unit.NutritionUnitMg:
                    serializer.Serialize(writer, "NUTRITION_UNIT_MG");
                    return;
                case Unit.NutritionUnitMkg:
                    serializer.Serialize(writer, "NUTRITION_UNIT_MKG");
                    return;
            }
            throw new Exception("Cannot marshal type Unit");
        }

        public static readonly UnitConverter Singleton = new UnitConverter();
    }
}